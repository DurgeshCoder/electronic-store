Index: src/pages/users/Profile.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useContext, useEffect, useState } from \"react\"\r\nimport { Alert, Col, Container, Row, Modal, Button, Card, Table, Form, Spinner } from \"react-bootstrap\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { toast } from \"react-toastify\"\r\nimport UserProfileView from \"../../components/users/UserProfileView\"\r\nimport UserContext from '../../context/UserContext'\r\nimport { getUser, updateUser } from \"../../services/user.service\"\r\nconst Profile = () => {\r\n\r\n    const userContext = useContext(UserContext)\r\n    const { userId } = useParams()\r\n    const [user, setUser] = useState(null)\r\n\r\n    // modals state \r\n    const [show, setShow] = useState(false);\r\n\r\n    const [updateLoading, setUpdateLoading] = useState(false)\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShowModal = () => {\r\n        console.log(\"showing modal\")\r\n        setShow(true)\r\n    };\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(\"data from url userid \" + userId)\r\n        // if (userContext.userData) {\r\n        //     getUserDataFromServer()\r\n        // }\r\n        getUserDataFromServer()\r\n\r\n    }, [])\r\n\r\n    const getUserDataFromServer = () => {\r\n        //api call\r\n        console.log(userContext)\r\n\r\n        getUser(userId)\r\n            .then(data => {\r\n                console.log(data);\r\n                setUser(data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setUser(null)\r\n                toast.error(\"Error in loading user information from server !\")\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const updateFieldHandler = (event, property) => {\r\n        setUser({\r\n            ...user,\r\n            [property]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    const updateUserData = () => {\r\n        console.log(\"updating user data\")\r\n        if (user.name === undefined || user.name.trim() === '') {\r\n            toast.error(\"user name required !!\")\r\n            return\r\n        }\r\n\r\n        // ...  rest of the field\r\n\r\n        setUpdateLoading(true)\r\n        updateUser(user).then(updatedUser => {\r\n            console.log(updatedUser)\r\n            toast.success(\"User details updated !!\")\r\n            handleClose()\r\n        }).\r\n            catch(error => {\r\n                console.log(error)\r\n                // if (error.response.status == 400) {\r\n                //     toast.error(error.response.data.name)\r\n                // }\r\n                toast.error(\"Not updated !! Error\")\r\n            })\r\n            .finally(() => {\r\n                setUpdateLoading(false)\r\n            })\r\n    }\r\n\r\n\r\n    //update view\r\n\r\n    const updateViewModal = () => {\r\n        return (\r\n            <div>\r\n                <Modal size=\"lg\" animation={false} show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update the informations</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Card className=\" border-0 shadow-sm \" style={{\r\n                            borderRadius: \"50px\"\r\n                        }}>\r\n                            <Card.Body>\r\n                                <Table className=\"\" responsive hover  >\r\n\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>Name</td>\r\n                                            <td>\r\n                                                <Form.Control\r\n                                                    className=\"\" type=\"text\"\r\n                                                    value={user.name}\r\n                                                    onChange={(event) => updateFieldHandler(event, 'name')}\r\n                                                />\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Email</td>\r\n                                            <td>{user.email}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>New Password</td>\r\n                                            <td>\r\n                                                <Form.Control\r\n                                                    placeholder=\"Enter new password here\"\r\n                                                    type=\"password\"\r\n                                                    onChange={(event) => updateFieldHandler(event, 'password')}\r\n\r\n                                                />\r\n\r\n                                                <p>Leave the field blank for same password</p>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Gender</td>\r\n                                            <td>{user.gender}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>About</td>\r\n                                            <td>\r\n\r\n\r\n                                                <Form.Control as={'textarea'} value={user.about} rows={8}\r\n                                                    onChange={(event) => updateFieldHandler(event, 'about')}\r\n                                                />\r\n\r\n\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Roles</td>\r\n                                            <td>{user.roles.map(role => <div key={role.roleId}>{role.roleName}</div>)}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n\r\n                                </Table>\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n\r\n\r\n\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={updateUserData} disabled={updateLoading} >\r\n                            <Spinner\r\n                                animation=\"border\"\r\n                                size=\"sm\"\r\n                                hidden={!updateLoading}\r\n                                className=\"me-2\"\r\n                            />\r\n                            <span hidden={!updateLoading}>Updaing</span>\r\n                            <span hidden={updateLoading}> Save Changes</span>\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"mt-3\">\r\n                <Row>\r\n                    <Col md={\r\n                        {\r\n                            span: 10,\r\n                            offset: 1\r\n                        }\r\n                    }>\r\n\r\n                        {(user ? (\r\n\r\n                            <>\r\n                                <UserProfileView\r\n                                    user={\r\n                                        // {\r\n                                        //     name: \"Durgesh Kumar Tiwari\",\r\n                                        //     email: \"durgesh@gmail.com\",\r\n                                        //     gender: 'MALE',\r\n                                        //     about: \"I am professional react developer.\",\r\n                                        //     roles: [{ roleId: 1, roleName: \"Admin\" }, { roleId: 2, roleName: 'NORMAL' }]\r\n                                        // }\r\n                                        user\r\n                                    }\r\n\r\n                                    handleShowModal={handleShowModal}\r\n                                />\r\n\r\n                                {updateViewModal()}\r\n\r\n                            </>\r\n\r\n\r\n                        ) : <Alert><h3 className=\"text-center text-uppercase m-2\">User not loaded from server !</h3></Alert>)\r\n                        }\r\n\r\n                        {/* {userContext.userData.user.userId} */}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Profile
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/users/Profile.jsx b/src/pages/users/Profile.jsx
--- a/src/pages/users/Profile.jsx	
+++ b/src/pages/users/Profile.jsx	
@@ -13,9 +13,7 @@
 
     // modals state 
     const [show, setShow] = useState(false);
-
     const [updateLoading, setUpdateLoading] = useState(false)
-
     const handleClose = () => setShow(false);
     const handleShowModal = () => {
         console.log("showing modal")
@@ -37,7 +35,6 @@
     const getUserDataFromServer = () => {
         //api call
         console.log(userContext)
-
         getUser(userId)
             .then(data => {
                 console.log(data);
